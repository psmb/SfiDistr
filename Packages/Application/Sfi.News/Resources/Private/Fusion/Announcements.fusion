prototype(Sfi.News:Announcement) < prototype(Sfi.News:News) {
	templatePath = 'resource://Sfi.News/Private/Templates/Announcement.html'
	@context.configuration = ${Configuration.setting('Sfi.News.announcementDetail')}
	configuration = ${configuration}

	place = ${q(node).property('place')}
	dateStart = ${q(node).property('dateStart')}

	moreItems = Sfi.News:AnnouncementsList {
		@context.collection.@process.filterOutSelf {
			expression = ${q(value).filter('[_name != ' + q(node).property('_name') + ']').get()}
			@position = 'start'
		}
		content.archiveLink >
		@context.enableSlider = ${false}
	}
}

prototype(Sfi.News:AnnouncementShort) < prototype(Sfi.News:NewsShort) {
	templatePath = 'resource://Sfi.News/Private/Templates/AnnouncementShort.html'
	@context.configuration = ${Configuration.setting('Sfi.News.announcementShort')}
	configuration = ${configuration}

	place = ${String.stripTags(q(node).property('place'))}
	dateStart = ${q(node).property('dateStart')}
}

prototype(Sfi.News:AnnouncementsList) < prototype(Flowpack.Listable:List) {
	@context.enableSlider = ${true}
	listTitle = ${Translation.translate('news.announcements', null, [], null, 'Sfi.Sfi')}
	listTitleClass = 'H4 color-grayAlt paddingVertical-single marginBottom-sesquialteral border-bottom'
	# Get announcements collection here and push it to context vars, to be used both in Listable and in @cache
	@context.collection = ${q(site).children('announcements').find('[instanceof Sfi.News:Announcement]').get()}
	@context.collection.@process.filterByDate = ${q(value).count() > 0 ? q(value).filterByDate('date', Date.subtract(Date.Now(), 'PT2H')).get() : value}
	@context.collection.@process.sort = ${q(value).count() > 0 ? q(value).sort('date', 'ASC').get() : value}
	prototype(Flowpack.Listable:Listable) {
		sortProperty>
		sortOrder>
		limit = 6
		paginationEnabled = ${false}
		collection = ${collection}
		collection.@process.sort>
		itemRenderer = 'Sfi.News:AnnouncementShort'
		listClass = ${enableSlider ? 'MediaAnnouncements MediaAnnouncements--enableSlider js-carousel-4x' : 'MediaAnnouncements'}
	}
	@cache {
		mode = 'cached'
		# First element in collection is the one, that expires soonest (see sortAgain)
		maximumLifetime = ${q(collection).first().property('date').timestamp - Date.now().timestamp}
		entryIdentifier {
			node = ${node}
			editPreviewMode = ${editPreviewMode}
		}
		entryTags {
			1 = ${Neos.Caching.nodeTypeTag('Sfi.News:Announcement')}
		}
	}
	@if.notEmpty = ${q(collection).count() > 0}
}
