prototype(Sfi.Sfi:Person) {
	templatePath = 'resource://Sfi.Sfi/Private/Templates/NodeTypes/PersonSimple.html'
	partialRootPath = 'resource://Sfi.Sfi/Private/Partials'
	layoutRootPath = 'resource://Sfi.Sfi/Private/Layouts'
	sectionMenu = ${siblingsMenu}

	main = Neos.Neos:ContentCollection {
		nodePath = 'main'
	}

	@context.author = ${node}
	authorBlogs = Sfi.Sfi:PaperWithAuthor.AuthorInfoBlogsList {
		@process.spacing = afx`<div class="marginTop-double">{value}</div>`
	}
	authorArticles = Sfi.Sfi:PaperWithAuthor.AuthorInfoArticlesList
	articlesByTag = Sfi.Sfi:ListRelatedByTag
	listByTag = Sfi.News:ListByTag

	experience = Neos.Neos:ContentCollection {
		nodePath = 'experience'
	}
	experienceSum = Sfi.Sfi:TimeIntervalSum {
		path = 'experience'
	}
	experienceSpeciality = Neos.Neos:ContentCollection {
		nodePath = 'experienceSpeciality'
	}
	experienceSpecialitySum = Sfi.Sfi:TimeIntervalSum {
		path = 'experienceSpeciality'
	}

	@context.fallbackImage = Neos.Neos:ImageUri {
		asset = ${node.properties.image}
		maximumWidth = 400
		maximumHeight = 600
		allowCropping = TRUE
		@process.markup = afx`<img src={value} alt={node.properties.title} />`
	}

	@context.coverCollection = Neos.Neos:ContentCollection {
		nodePath = 'coverCollection'
		prototype(Neos.NodeTypes:Image) {
			maximumWidth = 400
			maximumHeight = 600
			allowCropping = TRUE
		}
	}

	coverImage = ${q(node).children('coverCollection').children().count() > 0 ? coverCollection : fallbackImage}

	@process.contentElementWrapping = Neos.Neos:ContentElementWrapping
}

prototype(Sfi.Sfi:PersonShort) < prototype(Neos.Neos:Content) {
	templatePath = 'resource://Sfi.Sfi/Private/Templates/TypoScriptObjects/PersonShort.html'
	title = ${String.stripTags(q(node).property('title'))}
	subject = ${String.stripTags(q(node).property('subject'))}
	degree = ${String.stripTags(q(node).property('degree'))}
	position = ${String.stripTags(q(node).property('freeText')) || String.stripTags(q(node).property('position'))}
	quote = ${q(node).property('quote')}
	showPosition = ${true}
	image = ${node.properties.image ? node.properties.image : q(node).find('[instanceof Neos.NodeTypes:Image]').first().property('image')}
}

prototype(Sfi.Sfi:PersonGphShort) < prototype(Neos.Neos:ContentComponent) {
	title = ${String.stripTags(q(node).property('title'))}

	renderer = afx`
		<h3 class="Paragraph">{props.title}</h3>
	`
}

prototype(Sfi.Sfi:PersonFormalListing) < prototype(Neos.Neos:ContentComponent) {
	renderer = Neos.Fusion:Array {
		1 = Sfi.Sfi:PersonFormalListingByLevel {
			title = 'Состав педагогических (научно-педагогических) работников образовательной организации по образовательной программе 46.04.01 История (магистратура)'
			level = '46.04.01 История (магистратура)'
			anchor = '460401'
		}

		2 = Sfi.Sfi:PersonFormalListingByLevel {
			title = 'Состав педагогических (научно-педагогических) работников образовательной организации по образовательной программе 48.04.01 Теология (магистратура)'
			level = '48.04.01 Теология (магистратура)'
			anchor = '480401'
		}
		3 = '<p class="ParagraphAlt">**В соответствии с Постановлением Правительства Российской Федерации от 06.06.2023 № 937 "О приостановлении действия пунктов 11 и 14 Правил размещения на официальном сайте образовательной организации в информационно-телекоммуникационной сети "Интернет" и обновления информации об образовательной организации" размещение информации о преподавателе дисциплины "Проблематика межконфессиональных отношений" приостановлено до 31 декабря 2023 года.</p>'
		
		4 = Sfi.Sfi:PersonFormalListingByLevel {
			title = 'Состав педагогических (научно-педагогических) работников образовательной организации по образовательной программе 48.03.01 Теология (бакалавриат)'
			level = '48.03.01 Теология (бакалавриат)'
			anchor = '480301'
		}
		5 = '<p class="ParagraphAlt">**В соответствии с Постановлением Правительства Российской Федерации от 06.06.2023 № 937 "О приостановлении действия пунктов 11 и 14 Правил размещения на официальном сайте образовательной организации в информационно-телекоммуникационной сети "Интернет" и обновления информации об образовательной организации" размещение информации о преподавателе дисциплины "История церкви Нового и Новейшего времени" приостановлено до 31 декабря 2023 года.</p>'
		
	}
	@cache {
		mode = 'cached'
		entryIdentifier {
			node = ${node}
		}
		entryTags {
			1 = ${Neos.Caching.nodeTypeTag('Sfi.Sfi:Person')}
		}
	}
}

prototype(Sfi.Sfi:PersonFormalListingByLevel) < prototype(Neos.Fusion:Collection) {
	title = 'to-be-set'
	level = 'to-be-set'
	anchor = 'to-be-set'
	@context.level = ${String.replace(String.replace(this.level, '(', '\('), ')', '\)')}
	@context.title = ${this.title}
	@context.anchor = ${this.anchor}
	collection = ${q(site).find('[instanceof Sfi.Sfi:Person]').filter('[isProfessor = TRUE][subject *= "' + this.level + '"]').get()}
	itemName = 'node'
	itemRenderer = Neos.Fusion:Component {
		nodeUri = Neos.Neos:NodeUri {
			node = ${node}
		}
		subject = ${String.pregMatch(node.properties.subject, '/<strong>' + level + ':<\/strong>([^<]*)/u')[1]}
		teachingOp = ${Array.join(String.pregMatchAll(node.properties.subject, '/<strong>([^<]+):<\/strong>/u')[1] || [], ', ')}
		experienceSum = Sfi.Sfi:TimeIntervalSum {
			path = 'experience'
		}
		experienceSpecialitySum = Sfi.Sfi:TimeIntervalSum {
			path = 'experienceSpeciality'
		}
		renderer = afx`
			<tr itemprop="teachingStaff">
				<td itemprop="fio"><a href={props.nodeUri} class="Link">{node.properties.title}</a></td>
				<td itemprop="post">{node.properties.position}</td>
				<td itemprop="teachingDiscipline">{props.subject}</td>
				<td itemprop="teachingLevel">{node.properties.teachingLevelQual}</td>
				<td itemprop="teachingLevel" @if.live={node.context.workspace.name != 'live'}>{node.properties.teachingLevel}</td>
				<td itemprop="teachingQual" @if.live={node.context.workspace.name != 'live'}>{node.properties.teachingQual}</td>
				<td itemprop="employeeQualification">{node.properties.education}</td>
				<td itemprop="degree">{node.properties.degree || 'Без ученой степени'}</td>
				<td itemprop="academStat">{node.properties.degreeTitle || 'Без ученого звания'}</td>
				<td itemprop="profDevelopment">{node.properties.educationUpgrade || 'В сроки, установленные действующим законодательством'}</td>
				<td itemprop="genExperience">{props.experienceSum}</td>
				<td itemprop="specExperience">{props.experienceSpecialitySum}</td>
				<td itemprop="teachingOp">{props.teachingOp}</td>
			</tr>
		`
	}
	@process.wrap = afx`
		<h3 class="H3 marginTop-double marginBottom-single" id={anchor}>{title}</h3>
		<table class="Table" itemprop="teachingStaff" style="max-height: 600px">
			<thead>
				<tr>
					<th>Ф.И.О.</th>
					<th>Должность преподавателя</th>
					<th>Перечень преподаваемых дисциплин</th>
					<th>Уровень (уровни) профессионального образования, квалификация</th>
					<th @if.live={node.context.workspace.name != 'live'}>Уровень (уровни) профессионального образования</th>
					<th @if.live={node.context.workspace.name != 'live'}>Квалификация</th>
					<th>Наименование направления подготовки и (или) специальности, в том числе научной</th>
					<th>Ученая степень (при наличии)</th>
					<th>Ученое звание (при наличии)</th>
					<th>Сведения о повышении квалификации (за последние 3 года) и сведения о профессиональной переподготовке (при наличии)</th>
					<th>Общий стаж работы*</th>
					<th>Стаж работы по специальности (сведения о продолжительности опыта (лет) работы в профессиональной сфере)*</th>
					<th>Наименование образовательных программ, в реализации которых участвует педагогический работник</th>
				</tr>
			</thead>
			<tbody>
				{value}
			</tbody>
		</table>
		<p class="ParagraphAlt">*Данные указаны на текущую дату</p>
	`
}

prototype(Sfi.Shared:ContentCaseShort) < prototype(Neos.Neos:ContentCase) {
	isRector {
		condition = ${q(node).property('isRector')}
		type = 'Sfi.Sfi:PersonShort'
	}
	isProRector {
		condition = ${q(node).property('isProRector')}
		type = 'Sfi.Sfi:PersonShort'
	}
	isSenior {
		condition = ${q(node).property('isSenior')}
		type = 'Sfi.Sfi:PersonShort'
	}
	isChairperson {
		condition = ${q(node).property('isChairperson')}
		type = 'Sfi.Sfi:PersonShort'
	}
}
